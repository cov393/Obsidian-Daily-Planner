import { __awaiter } from "tslib";
import { Notice } from "obsidian";
import { ensureFoldersExist } from "../utils/utils";
export class HealthTrackerManager {
    constructor(app, settings) {
        //Default list of muscle groups (used only if there is no previous table)
        this.defaultMuscleGroups = ["Glutes", "Legs", "Back", "Brists", "Shoulders", "Jogging", "Yoga"];
        this.app = app;
        this.settings = settings;
    }
    // Get the folder name by month
    getFileNameByMonth(date) {
        const monthData = date.toLocaleDateString("en-GB", { month: "long" });
        return `📅 ${monthData}`;
    }
    // Get the file name by week
    getFileNameByWeek(date) {
        const startOfWeek = this.getStartOfWeek(date);
        const endOfWeek = new Date(startOfWeek);
        endOfWeek.setDate(startOfWeek.getDate() + 6);
        const startDate = startOfWeek.getDate();
        const endDate = endOfWeek.getDate();
        const startMonth = startOfWeek.toLocaleDateString("en-GB", { month: "short" });
        const endMonth = endOfWeek.toLocaleDateString("en-GB", { month: "short" });
        return startMonth === endMonth
            ? `${startDate} - ${endDate}.md`
            : `${startDate} ${startMonth} - ${endDate} ${endMonth}.md`;
    }
    // Get the full file path by date
    getFilePathByDate(date) {
        return `${this.settings.mainFileDirectory}/${this.settings.healthTrackerFileDirectory}/${this.getFileNameByMonth(date)}/${this.getFileNameByWeek(date)}`;
    }
    // Calculate the start of the week (Monday)
    getStartOfWeek(date) {
        const startOfWeek = new Date(date);
        const day = startOfWeek.getDay(); // Sunday = 0, Monday = 1, ...
        const offset = day === 0 ? 6 : day - 1; // Adjust for Monday start
        startOfWeek.setDate(startOfWeek.getDate() - offset);
        startOfWeek.setHours(0, 0, 0, 0); // Reset time to midnight
        return startOfWeek;
    }
    // Ensure all parent folders exist
    ensureFoldersExist(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const folderPath = filePath.substring(0, filePath.lastIndexOf("/"));
            let folder = this.app.vault.getAbstractFileByPath(folderPath);
            if (!folder) {
                try {
                    yield this.app.vault.createFolder(folderPath);
                    new Notice(`Created folder: ${folderPath}`);
                }
                catch (error) {
                    console.error(`Failed to create folder ${folderPath}:`, error);
                    throw new Error(`Could not create folder ${folderPath}`);
                }
            }
        });
    }
    // New method: Extract muscle groups from the previous table
    getPreviousMuscleGroups(currentDate) {
        return __awaiter(this, void 0, void 0, function* () {
            const previousWeekStart = new Date(this.getStartOfWeek(currentDate));
            previousWeekStart.setDate(previousWeekStart.getDate() - 7); // Switch to the previous week
            const previousPath = this.getFilePathByDate(previousWeekStart);
            const previousFile = this.app.vault.getAbstractFileByPath(previousPath);
            if (!previousFile) {
                console.warn(`Previous week file not found: ${previousPath}. Using default muscle groups.`);
                return this.defaultMuscleGroups;
            }
            try {
                const content = yield this.app.vault.read(previousFile);
                const lines = content.split("\n");
                // Find the start of the table (after "Daily Habits Track"))
                const tableStart = lines.findIndex(line => line.includes("Daily Habits Track"));
                if (tableStart === -1) {
                    return this.defaultMuscleGroups; // Fallback if the table is corrupted
                }
                const muscleGroups = [];
                for (let i = tableStart + 1; i < lines.length && lines[i].startsWith("|"); i++) {
                    const cells = lines[i].split("|").map(cell => cell.trim());
                    if (cells.length < 2)
                        continue;
                    const group = cells[1];
                    if (group) {
                        muscleGroups.push(group); // Extract the muscle group from the second column
                    }
                }
                return muscleGroups.length > 0 ? muscleGroups : this.defaultMuscleGroups;
            }
            catch (error) {
                console.error(`Error parsing previous week file ${previousPath}:`, error);
                return this.defaultMuscleGroups; // Fallback to default
            }
        });
    }
    // Create a new weekly health tracker file if it doesn't exist
    createWeeklyFile() {
        return __awaiter(this, void 0, void 0, function* () {
            const today = new Date();
            const filePath = this.getFilePathByDate(today);
            yield ensureFoldersExist(this.app, filePath);
            let file = this.app.vault.getAbstractFileByPath(filePath);
            if (file) {
                return; // File already exists, do nothing
            }
            // Ensure parent folders exist
            yield this.ensureFoldersExist(filePath);
            const startOfWeek = this.getStartOfWeek(today);
            const daysOfWeek = ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"];
            const dates = [];
            // Collect dates and months for the week
            for (let i = 0; i < 7; i++) {
                const current = new Date(startOfWeek);
                current.setDate(startOfWeek.getDate() + i);
                dates.push({
                    day: current.getDate(),
                    month: current.toLocaleDateString("en-GB", { month: "short" }),
                });
            }
            // Obtain a dynamic list of muscle groups from the previous week
            const muscleGroups = yield this.getPreviousMuscleGroups(today);
            // Build table content
            let content = `# Health Tracker - ${today.toLocaleDateString("en-GB")}\n\n`;
            content += "| Weekdays           | " + daysOfWeek.join(" | ") + " |\n";
            content += "| ------------------ |" + " --- |".repeat(7) + "\n";
            content += "| Daily Habits Track | " + dates.map(d => `${d.day} ${d.month}`).join(" | ") + " |\n";
            // id Generator
            function generateId() {
                const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
                let result = '';
                for (let i = 0; i < 5; i++) {
                    result += chars.charAt(Math.floor(Math.random() * chars.length));
                }
                return result;
            }
            for (const group of muscleGroups) {
                content += `| ${group.padEnd(18)} | ` + daysOfWeek.map(() => `<input type="checkbox" unchecked id="${generateId()}">`).join(" | ") + " |\n";
            }
            try {
                file = yield this.app.vault.create(filePath, content);
                new Notice(`File "${file.name}" created!`);
            }
            catch (error) {
                console.error(`Failed to create file ${filePath}:`, error);
                new Notice(`Error creating file "${filePath}"`);
            }
        });
    }
    // Get summary of completed activities for the current week
    getThisWeekSummary() {
        return __awaiter(this, void 0, void 0, function* () {
            const filePath = this.getFilePathByDate(new Date());
            const file = this.app.vault.getAbstractFileByPath(filePath);
            const summary = [];
            if (!file) {
                return ["No health tracker file found for this week."];
            }
            try {
                const content = yield this.app.vault.read(file);
                const lines = content.split("\n");
                const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
                // Dynamically extract muscle groups from the current table (for summary statistics)
                const muscleGroups = yield this.getPreviousMuscleGroups(new Date()); // Or parse from the current file
                // Find the table start (after "Daily Habits Track")
                const tableStart = lines.findIndex(line => line.includes("Daily Habits Track"));
                if (tableStart === -1) {
                    return ["Table not found in file."];
                }
                // Parse muscle group rows
                for (let i = tableStart + 1; i < lines.length && lines[i].startsWith("|"); i++) {
                    const cells = lines[i].split("|").map(cell => cell.trim());
                    if (cells.length < 9)
                        continue; // Skip invalid rows
                    const group = cells[1];
                    if (!muscleGroups.includes(group.trim()))
                        continue;
                    // Check each day (columns 2 to 8)
                    for (let j = 2; j <= 8; j++) {
                        if (cells[j].includes("☑️")) {
                            summary.push(`${group.trim()} on ${daysOfWeek[j - 2]}`);
                        }
                    }
                }
                return summary.length > 0 ? summary : ["No completed activities this week."];
            }
            catch (error) {
                console.error(`Error reading file ${filePath}:`, error);
                return ["Error retrieving summary."];
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,