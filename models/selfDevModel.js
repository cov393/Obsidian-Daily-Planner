import { __awaiter } from "tslib";
import { Notice, TFile } from "obsidian";
import { ensureFoldersExist } from "../utils/utils";
import { PassThrough } from "stream";
export class SelfDevManager {
    constructor(app, settings) {
        this.app = app;
        this.settings = settings;
    }
    // GET the folder name by year
    getFileNameByYear(date) {
        const yearDate = date.toLocaleDateString("en-GB", { year: "numeric" });
        return `${yearDate} Year`;
    }
    // Get the folder name by month
    getFileNameByMonth(date) {
        const monthData = date.toLocaleDateString("en-GB", { month: "long" });
        return `ðŸ“… ${monthData}`;
    }
    // Getting the file name by date
    getFileNameByDate(date) {
        const dateStr = date.toLocaleDateString("en-GB", { day: "numeric", month: "long" });
        return `ðŸ“… ${dateStr}.md`;
    }
    // }
    getFilePathByDate(date) {
        return `${this.settings.mainFileDirectory}/${this.settings.taskFileDirectory}/${this.getFileNameByYear(date)}/${this.getFileNameByMonth(date)}/${this.getFileNameByDate(date)}`;
    }
    // Creating a new task file for today if it hasn't been created yet
    createDailyFile() {
        return __awaiter(this, void 0, void 0, function* () {
            const filePath = this.getFilePathByDate(new Date());
            yield ensureFoldersExist(this.app, filePath);
            let file = this.app.vault.getAbstractFileByPath(filePath);
            if (!file) {
                file = yield this.app.vault.create(filePath, `# âœ…Tasks - ${new Date().toLocaleDateString("en-GB")}\n\n`);
                new Notice(`Fail "${file.name}" created!`);
            }
            else {
                PassThrough;
            }
        });
    }
    // Retrieve incomplete tasks for today
    getTodayTasks() {
        return __awaiter(this, void 0, void 0, function* () {
            const filePath = this.getFilePathByDate(new Date());
            const file = this.app.vault.getAbstractFileByPath(filePath);
            if (file instanceof TFile) {
                const content = yield this.app.vault.read(file);
                return content
                    .split('\n')
                    .filter(line => line.trim().startsWith('- [') && !line.trim().startsWith('- [x]'))
                    .map(line => line.trim());
            }
            return [];
        });
    }
    // Add a task to today's file
    appendTask(taskText) {
        return __awaiter(this, void 0, void 0, function* () {
            const filePath = this.getFilePathByDate(new Date());
            const file = this.app.vault.getAbstractFileByPath(filePath);
            if (file instanceof TFile) {
                yield this.app.vault.append(file, `- [ ] ${taskText}\n`);
            }
            else {
                // If the file doesn't exist - create it and add the task
                yield this.createDailyFile();
                const newFile = this.app.vault.getAbstractFileByPath(filePath);
                yield this.app.vault.append(newFile, `- [ ] ${taskText}\n`);
            }
        });
    }
    // Transfer incomplete tasks from yesterday to today
    migrateUnfinishedTasks() {
        return __awaiter(this, void 0, void 0, function* () {
            const today = new Date();
            const yesterday = new Date();
            yesterday.setDate(today.getDate() - 1);
            const yesterdayFilePath = this.getFilePathByDate(yesterday);
            const todayFilePath = this.getFilePathByDate(today);
            const yesterdayFile = this.app.vault.getAbstractFileByPath(yesterdayFilePath);
            const todayFile = this.app.vault.getAbstractFileByPath(todayFilePath);
            if (!(yesterdayFile instanceof TFile)) {
                new Notice("File from yesterday doesn't exists.");
                return;
            }
            const content = yield this.app.vault.read(yesterdayFile);
            const unfinishedTasks = content
                .split('\n')
                .filter(line => line.trim().startsWith('- [') && !line.trim().startsWith('- [x]'))
                .map(line => line.trim());
            if (unfinishedTasks.length === 0) {
                new Notice("There are no unfinished tasks to transfer.");
                return;
            }
            if (!(todayFile instanceof TFile)) {
                yield this.createDailyFile();
            }
            const file = this.app.vault.getAbstractFileByPath(todayFilePath);
            yield this.app.vault.append(file, unfinishedTasks.join('\n') + '\n');
            new Notice(`Transfared ${unfinishedTasks.length} tasks from file ${this.getFileNameByDate(yesterday)}!`);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,